# 🧠 Product API POC

Une API FastAPI + GraphQL pour gérer un catalogue de produits multilingue avec recherche sémantique et fallback automatique.

---

## 🛠️ Stack technique

- 🔥 FastAPI + Strawberry GraphQL
- 🧱 Architecture Hexagonale (Domain, UseCases, Interfaces, Services, Exposers)
- 🤗 Transformers (LaBSE pour embeddings + MarianMT pour traduction)
- 🐍 Python 3.11 avec Poetry
- 🧪 Tests en cours
- 🐳 Docker + Docker Compose

---

## 📁 Structure

```
apis/
├── domains/                     # Entités métiers (ProductInternal)
├── usecases/
│   ├── product/                 # create, list, search
│   └── i18n/                    # resolve (fallback)
├── services/
│   ├── embeddings/             # LaBSE + cosine similarity
│   ├── i18n/                   # TranslationService (MarianMT)
│   └── db/                     # InMemory repo
├── interfaces/repositories/    # Port abstrait
├── exposers/
│   ├── resolvers/              # GraphQL Queries / Mutations
│   └── schemas/                # GraphQL types et inputs
├── main.py                     # Entrée FastAPI + schema GraphQL
├── seed.py                     # Chargement de données via GraphQL
```

---

## 🚀 Lancer le projet

### 1. Prérequis

- Docker & Docker Compose
- (Optionnel) Python 3.11 + Poetry

### 2. Lancement

```bash
docker-compose up --build
```

Accessible via : http://localhost:8000/graphql

---

## ✨ Fonctionnalités

### ✅ Création de produit (multilingue)

- Code produit unique
- Traductions multiples (title + description)
- Embedding des champs selon la langue prioritaire

### 🔍 Recherche sémantique

- Basée sur LaBSE + Similarité Cosinus
- Recherche sur titre puis fallback sur description
- Seuil de similarité configurable (0.7)
- Résultats enrichis d’un champ `score`

### 🌍 Fallback de traduction automatique

- Si la locale demandée n’est pas présente :
  - Recherche une langue prioritaire disponible
  - Utilise MarianMT pour traduire dynamiquement

---

## 🧪 Exemple de requête GraphQL

```graphql
query {
  searchProducts(text: "gilet GREF01", locale: "fr") {
    code
    score
    translation {
      title
      description
    }
  }
}
```

---

## 📦 Données de test

Un script de seed (`seed.py`) permet de charger un jeu de données multilingues via mutation GraphQL.

---

## 🔮 À venir

- Tests automatisés
- Indexation vectorielle (Faiss / Qdrant)
- Authentification
- Support de base SQL